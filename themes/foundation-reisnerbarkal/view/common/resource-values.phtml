<?php
$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');
$labelInfo = $this->setting('property_label_information');
?>
<!-- Build a table to show the image and its transcript. The image is duplicated because it's difficult to separate the pdf from the base item media.
Next add some table entries for the previous and next page areas. These are item properties that are moved with JS down below -->
<div>
    <table id='transcription-table' class="transcription-table" style="border-collapse: unset;">
        <tr>
            <td class="transcription-img1" style="min-width: 500px;">
                <?php echo $img;?>
            </td>
            <td class="transcription-img2" style="min-width: 500px;">
                <?php echo $img;?>
            </td>
        </tr>
        <tr>
            <td id='previous-page'></td>
            <td id='next-page' style="
            text-align: right;">
            </td>
        </tr>
    </table>
</div>
<style type="text/css">
    /* Turning off the border and shadow at a higher level didn't work so a style tag was added */
   .resource.show .media-render > a:only-child {
        border: none;
        -webkit-box-shadow: 0 0 0 0px rgb(255, 255, 255);
        box-shadow: 0 0 0 0px rgb(255, 255, 255);}

</style>
<dl>
<?php foreach ($values as $term => $propertyData): ?>
    <div class="property">
        <dt>
        <?php
            if ($propertyData['alternate_label']):
                echo $escape($propertyData['alternate_label']);
            else:
                echo $escape($translate($propertyData['property']->label())); 
            endif;?>
        <?php if ('term' === $labelInfo): ?>
        <span class="field-term">(<?php echo $escape($propertyData['property']->term()); ?>)</span>
        <?php elseif ('vocab' === $labelInfo): ?>
        <span class="field-term">(<?php echo $escape($propertyData['property']->vocabulary()->label()); ?>)</span>
        <?php endif; ?>
        </dt>
        <div class="values">

        <?php 
        foreach ($propertyData['values'] as $value): ?>
            <?php
            $valueType = $value->type();
            $class = ['value'];
            if ('resource' == $valueType || strpos($valueType, 'resource') !== false) {
                $class[] = 'resource';
                $class[] = $escape($value->valueResource()->resourceName());
            } elseif ('uri' == $valueType) {
                $class[] = 'uri';
            }
            if (!$value->isPublic()) {
                $class[] = 'private';
            }   
            ?>
            <dl class="<?
                echo implode(' ', $class); ?>" lang="<?php echo $escape($value->lang()); ?>">
                <?php
                    if ($language = $value->lang()) { ?>
                        <span class="language">
                            <?php echo $language; ?>
                        </span>
                    <?php };?> <!--close inner if -->
                    <?php echo $value->asHtml();?>
                
            </dl>
        <?php endforeach; ?>
        </div>
    </div>
<?php endforeach; ?>
</dl>
<script type="text/javascript">

// var media_renders = document.getElementsByClassName('media-render');
// if (media_renders != null && media_renders.length !== 0) {
//     console.log('null check fails')
//     media_renders[1].hidden = true;
//     media_renders[2].hidden = true;
//     var i_frames = document.getElementsByTagName('iframe');
//     if (i_frames != null) {
//         i_frames[1].style.height = '700px';
//     }
// }
var item_images1 = document.getElementsByClassName('transcription-img1')
var item_images2 = document.getElementsByClassName('transcription-img2')
if (item_images1 != null){
    item_images1[0].childNodes[2].hidden = true;
}
if (item_images2 != null){
    item_images2[0].childNodes[1].hidden = true;
}
// Provided the items on the page are in the correct order the page the following should work. 
// The following is assumed:
// props[0] = title
// props[1] = description
// props[2] = page start
// props[3] = page end
// Null checking is for the first and last pagess
var props = document.getElementsByClassName('property');
if (props != undefined && props != null){
    var previousPage = document.getElementById('previous-page');
    var nextPage = document.getElementById('next-page');

    if (previousPage != null){
        previousPage.append(props[2])
        previousPage.childNodes[0].childNodes[1].innerText = 'Previous Page'
    }
    else 
        if (nextPage != null){
        nextPage.append(props[2])
        nextPage.childNodes[1].childNodes[1].innerText = 'Next Page';
    }
    if (nextPage != null){
        nextPage.append(props[3])
        nextPage.childNodes[1].childNodes[1].innerText = 'Next Page'
    }
    else 
        if (previousPage != null){
        previousPage.append(props[2])
        previousPage.childNodes[0].childNodes[1].innerText = 'Previous Page';
    }
}
</script>